#+PROPERTY: header-args :shebang "#!/bin/sh"

* Shell script files
:PROPERTIES:
:ID:       6946c996-68f9-4f97-a63d-4df158bbf6f3
:END:
** Compression
*** Testing compression levels
This script tries all compression levels and generates an org file with a table to see when increasing the level doesn't make much of a difference.
#+begin_src sh :test-compression-levels
rm $1_results.org

#LAST_FILE_SIZE=$(stat -c%s $1.part4.rar)
#echo `expr 3 \* 1536 \* 1000000 + $LAST_FILE_SIZE`
echo "| Compression Program | compression level | Final size | Difference in Mb | Normalized Difference (percentage) |" >> $1_results.org
echo "|---------------------+-------------------+------------+------------------+------------------------------------|" >> $1_results.org


for i in {1..5}
do
    rar a -m$i -v1500000000b $1_$i.rar $1
    TOTAL_FILE_SIZE=0
    for rarvolume in $1_$i*.rar
    do
	FILE_SIZE=$(stat -c%s $rarvolume)
	TOTAL_FILE_SIZE+=`expr $TOTAL_FILE_SIZE + $FILE_SIZE`
    done
    echo $TOTAL_FILE_SIZE
    echo "| rar | $i | $TOTAL_FILE_SIZE |||" >> $1_results.org
done

echo "|-" >> $1_results.org

for i in {1..9}
do
    7z a -mx$i -v1536m $1_$i.7z $1
    TOTAL_FILE_SIZE=0
    for _7zvolume in $1_$i.7z*; do
	FILE_SIZE=$(stat -c%s $_7zvolume)
	TOTAL_FILE_SIZE+=`expr $TOTAL_FILE_SIZE + $FILE_SIZE`
    done
    echo $TOTAL_FILE_SIZE
    echo "| 7z | $i | $TOTAL_FILE_SIZE |||" >> $1_results.org
done
echo "#+TBLFM: @<<<\$5..@>\$5=if(\"\$1\"==\"@-1\$1\",floor((@-1\$3-\$3)*100/@<<\$3),string(\"\")); E f-2::@<<<\$4..@>\$4=if(\"\$1\"==\"@-1\$1\",floor((@-1\$3-\$3)),string(\"\")); E" >> $1_results.org
#+end_src
** File encodings
*** Try all conversions
:PROPERTIES:
:ID:       78b6ac0f-4481-4b39-967a-be2fd47750dd
:END:
#+begin_src sh :tangle try-all.sh
declare -a encodings=("utf-8-unix" "utf8" "cp1255" "ISO-8859-8" "ISO-8859-1" "IBM862" "CSISOLATINHEBREW" "CSPC862LATINHEBREW" "HEBREW" "MS-HEBR")

for fromenc in "${encodings[@]}"; do
    for toenc in "${encodings[@]}"; do
	iconv -f $fromenc -t $toenc//IGNORE $1 2> /dev/null
	if [ $? -eq 0 ]; then
	    echo -n "$fromenc -> $toenc"
	fi
	for fromenc2 in "${encodings[@]}"; do
	    for toenc2 in "${encodings[@]}"; do
		iconv -f $fromenc -t $toenc//IGNORE $1 > try_all_temp 2> /dev/null
		if [ $? -eq 0 ]; then
		    iconv -f $fromenc2 -t $toenc2//IGNORE try_all_temp 2> /dev/null
		    if [ $? -eq 0 ]; then
			echo -n "$fromenc -> $toenc , $fromenc2 -> $toenc2:"
		    fi
		fi
	    done
	done
    done
done
#+end_src
** Git
*** Clean
:PROPERTIES:
:ID:       18affada-9ccf-4d24-a23d-ad67d8c475f9
:END:
#+begin_src sh :tangle git-clean.sh
#!/bin/sh

git fsck
git prune
git reflog expire --expire=now --all
git repack -ad  # Remove dangling objects from packfiles
git prune       # Remove dangling loose objects
#+end_src
*** git-diff
:PROPERTIES:
:ID:       670bce1c-88a7-4659-ae12-efaca5cdad90
:END:
#+begin_src sh :tangle git-diff.sh
#!/bin/sh

meld "$2" "$5" > /dev/null 2>&1
#+end_src
*** Show history
:PROPERTIES:
:ID:       a9acb004-0312-40fb-bcfe-6f1658238345
:END:
#+begin_src sh :tangle git-show-history.sh
#! /bin/sh

for commit in `git log --oneline | cut -f1 -d" "`; do
    echo -n $commit:
    git show $commit:./$1

done
#+end_src
*** Update my fork on github
:PROPERTIES:
:ID:       8b76af3c-db4d-40cb-acb8-370a7027aec3
:END:
#+begin_src sh :tangle git-update-fork.sh
git fetch upstream
git checkout master
git merge upstream/master
echo "You can now push.."
#+end_src
** Haskell
*** Get hackage versions
:PROPERTIES:
:ID:       545820db-8060-47b6-a8b5-87117f97aca2
:END:
#+begin_src sh :tangle get-hackage-versions.sh
for commit in `git log --oneline | cut -f1 -d" "`; do
    echo -n $commit: 
    git show $commit:./hackage-packages.nix | grep -A1 "pname = \"lens\"" | tail -1

done
#+end_src
** Image processing
*** Calculate bits per pixel
#+begin_src sh
#! /bin/sh

echo Quality: `identify -verbose $1 | grep Quality | cut -f2 -d:`
export pixels=`identify -verbose $1 | grep "Pixels:" | cut -f2 -d:`
echo Pixels = $pixels
export bits=`ls -all $1 | cut -f5 -d" "`
echo bits = $bits

export bpp=`echo "$bits / $pixels" | bc -l`

echo Bits per pixel = $bpp
#+end_src
** Latex
*** Fix wrong hebrew encoding
:PROPERTIES:
:ID:       182bdbf7-cbd6-4778-a4e4-a43fc9ee8bdb
:END:
Fixes gibberish due to wrong hebrew encoding.
#+begin_src sh :tangle fix-gibberish.sh
iconv -f utf8 -t ISO-8859-1//IGNORE $1 | iconv -f cp1255 -t utf8//IGNORE 2> /dev/null
#+end_src
*** Converts tex to org-mode
:PROPERTIES:
:ID:       6d8c5bca-fcd4-46ae-9338-94a2c54304b4
:END:
It converts it with pandoc with preprocessing taken from and postprocessing.
#+begin_src sh :tangle tex-to-org.sh
PREFIX=`echo $1 | cut -f1 -d.`

sed -i -e "/setlength{.oddsidemargin/ d" \
       -e "/setlength{.textwidth/ d" \
       -e "/begin{flushleft}/ d" \
       -e "/end{flushleft}/ d" \
       -e "/begin{flushleft}/ d" \
       -e "/end{flushleft}/ d" \
       -e "/begin{flushright}/ d" \
       -e "/end{flushright}/ d" \
       -e "/begin{center}/ d" \
       -e "/end{center}/ d" \
       -e "/begin{spacing}/ d" \
       -e "/end{spacing}/ d" \
       -e 's/\\[lL]arge//g' \
       -e 's/{``}/``/g' \
       -e 's/{`}/`/g' $PREFIX.tex


sed -i -r -e 's/\{\\(script|footnote)size ([^\}]*[\\%]*)\}/\2/g' $PREFIX.tex

pandoc -f latex -t org $PREFIX.tex > $PREFIX.temp.org

emacs --batch $PREFIX.temp.org --load=~/org-mode/elisp/org-fix-word-import.el --kill

emacs $PREFIX.temp.org
#+end_src
*** Converts word to org-mode
It uses soffice, abiword as well
#+begin_src sh
PREFIX=`echo $1 | cut -f1 -d.`

soffice --headless --convert-to odt $1

abiword --to=tex $PREFIX.odt

sed -i -e "/setlength{.oddsidemargin/ d" \
       -e "/setlength{.textwidth/ d" \
       -e "/begin{flushleft}/ d" \
       -e "/end{flushleft}/ d" \
       -e "/begin{flushright}/ d" \
       -e "/end{flushright}/ d" \
       -e "/begin{center}/ d" \
       -e "/end{center}/ d" \
       -e "/begin{spacing}/ d" \
       -e "/end{spacing}/ d" \
       -e 's/\\[lL]arge//g' \
       -e 's/{``}/``/g' \
       -e 's/{`}/`/g' $PREFIX.tex


sed -i -r -e 's/\{\\(script|footnote)size ([^\}]*[\\%]*)\}/\2/g' $PREFIX.tex

pandoc -f latex -t org $PREFIX.tex > $PREFIX.temp.org

emacs --batch $PREFIX.temp.org --load=~/org-mode/elisp/org-fix-word-import.el --kill

emacs $PREFIX.temp.org
#+end_src
** Misc
*** zte cellular modem hack
:PROPERTIES:
:ID:       74ef5500-414f-4297-bf54-7fc3d0fa3cab
:END:
#+begin_src sh :tangle zte.sh
sudo usb_modeswitch -v 19d2 -p 0154 -V 19d2 -P 0117 -M "5553424312345678000000000000061b000000020000000000000000000000"
#+end_src
** NixOS
*** Install packages from a ~.nix~ expression
:PROPERTIES:
:ID:       baefd0f4-c9ad-4555-9985-a9d2a7b1ab11
:END:
#+begin_src sh :tangle nix-install-pkgs.sh
nix-env -f ~/nixpkgs -i -f pkgs.nix
#+end_src
** Text
*** Compare if files have the same lines
#+begin_src sh
#!/bin/sh

sort $1 | sed '/^$/d' | sed -e 's/^[ \t]*//' > $1.1.ig
sort $2 | sed '/^$/d' | sed -e 's/^[ \t]*//' > $2.2.ig

meld $1.1.ig $2.2.ig
rm $1.1.ig
rm $2.2.ig
#+end_src
** Ubuntu
*** Copy the ubuntu background slideshow
#+begin_src sh
#! /bin/bash

mkdir ubuntu_backgrounds
i=0
for file in `cat $1 | grep "file" | cut -f2 -d">" | cut -f1 -d"<"`; do
    echo $file
    i=$((i+1))
    cp $file ubuntu_backgrounds/$i.jpg
done
#+end_src
